@model CentricTeam15.Models.RecognizeMe

@{
    ViewBag.Title = "Edit";
}

<h2>Recognized Employee</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    //Currently, the edit page does not work because "readonly" and "disabled" are enabled for each variable except comments,
        //as that is what we discussed with our PO. The edit page works if we remove "readonly" and "disabled" for each of them,
            //but we are keeping them for now to see if we can do so. If not, we will go back to the old method of editing all content

    <div class="form-horizontal">
        <h4>Edit Their Comment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.recognitionID)

        <div class="form-group">
            @Html.LabelFor(model => model.ID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ID", null, htmlAttributes: new { @class = "form-control"  } )
                @Html.ValidationMessageFor(model => model.ID, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.HiddenFor(model => model.bussinessUnit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.bussinessUnit, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bussinessUnit, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.HiddenFor(model => model.CoreValue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.CoreValue, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CoreValue, "", new { @class = "text-danger" })
            </div> 
        </div>

        <div class="form-group">
            @Html.HiddenFor(model => model.CurrentDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.CurrentDateTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CurrentDateTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
